/**
 * 以下代码主要用于说明严格模式下的eval代码的词法环境为 以当前执行环境为参数调用NewDeclarativeEnvironment方法创建的新的声明式词法环境，
 * 该eval代码段的 词法环境组件和变量环境组件均为该新建的词法环境。
 *
 * 着重强调两点:
 * 1. 严格模式下的eval代码段内声明的变量是无法被外部访问到的，伴随着eval代码段执行完毕，该执行环境被销毁一一该新建的词法环境组件和变量环境组件所指向的词法环境也被销毁了。
 * 2. 严格模式下的eval代码段内依旧是能访问和修改外部词法环境的变量的，但是有个前提是，该变量在eval代码中是不能被声明的。
 */
"use strict";
var a=1;

/**
 * 严格模式下的eval代码是可以访问和修改外部执行环境的变量的
 */
(function () {
    eval("    a=2;\n" + //这里修改外部词法环境的变量 a为2
        "    console.log(a==2);"); //true  印证了的确修改了。
}());

/**
 * 严格模式下eval代码段中声明的变量是不能被外部执行环境访问到的。
 */
(function () {
    eval("var b=2");
    console.log(typeof b =="undefined"); //true 说明外部不能访问eval代码段的变量。
}());

/**
 * 在eval代码段中声明与外部同名的变量，会阻碍eval代码段中对外部执行环境中的同名变量的访问，可以说，只能访问"同名eval本地变量"。
 */
(function () {
    eval("    var a=10;\n" + //在eval代码段中声明外部同名的变量a
        "    console.log(a==10);");//true 说明在标识符解析时，由于在eval代码段的执行环境中找到了a这个标识符，因此不会再在外部词法环境中寻找标识符，所以是不会访问到变量a的。
}());


